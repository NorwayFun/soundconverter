#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# SoundConverter - GNOME application for converting between audio formats.
# Copyright 2004 Lars Wirzenius
# Copyright 2005-2020 Gautier Portet
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

"""SoundConverter Launcher."""

# imports and package setup

import os
import re
import site
import sys
import locale
import gettext
from optparse import OptionParser, OptionGroup
import pkgutil
from gettext import gettext as _
import pkg_resources

# read values from setup.py
VERSION = pkg_resources.require('soundconverter')[0].version
NAME = pkg_resources.require('soundconverter')[0].project_name
SOURCE_PATH = pkg_resources.require('soundconverter')[0].location

# depending on where this file is installed to, make sure to use the proper
# prefix path for data
# https://docs.python.org/3/distutils/setupscript.html?highlight=package_data#installing-additional-files # noqa
if SOURCE_PATH.startswith(site.USER_BASE):
    DATA_PATH = os.path.join(site.USER_BASE, 'share/soundconverter')
elif SOURCE_PATH.startswith('/usr/local/'):
    DATA_PATH = '/usr/local/share/soundconverter'
elif SOURCE_PATH.startswith('/usr/'):
    DATA_PATH = '/usr/share/soundconverter'
else:
    # installed with -e, running from the cloned git source
    DATA_PATH = os.path.join(SOURCE_PATH, 'data')

try:
    import gi
    gi.require_version('Gst', '1.0')
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gst, Gtk, GLib, Gdk
except (ImportError, ValueError) as error:
    print(('{} needs GTK >= 3.0 (Error: "{}")'.format(NAME, error)))
    sys.exit(1)

# remove gstreamer arguments so only gstreamer sees them.
# See `gst-launch-1.0 --help-gst`and
# https://gstreamer.freedesktop.org/documentation/application-development/appendix/checklist-element.html # noqa
args = [a for a in sys.argv[1:] if not a.startswith('--gst-')]
Gst.init([None] + [a for a in sys.argv[1:] if a.startswith('--gst-')])

import soundconverter  # TODO i don't need that right?
from soundconverter.util.settings import settings, get_gio_settings
from soundconverter.util.formats import get_mime_type, get_mime_type_mapping
from soundconverter.interface.batch import CLI_Convert, cli_tags_main, \
    CLI_Check, use_memory_gsettings
from soundconverter.interface.ui import gui_main
from soundconverter.util.logger import logger, update_verbosity


def check_mime_type(t):
    """Exit soundconverter if the type is not supported"""
    mime = get_mime_type(t)
    if mime is None:
        logger.info('Cannot use "{}" mime type.'.format(mime))
        msg = 'Supported shortcuts and mime types:'
        for k, v in sorted(get_mime_type_mapping().items()):
            msg += ' {} {}'.format(k, v)
        logger.info(msg)
        raise SystemExit


def mode_callback(option, opt, value, parser, **kwargs):
    setattr(parser.values, option.dest, kwargs[option.dest])


class ModifiedOptionParser(OptionParser):
    """An OptionParser class that doesn't remove newlines on the epilog in
    order to show usage examples.
    
    https://stackoverflow.com/questions/1857346/

    See optparse.OptionParser for the original docstring
    """
    
    def format_epilog(self, formatter):
        if self.epilog is None:
            return ""
        return self.epilog


def parse_command_line():
    """Create and return the OptionParser.

    Parses the command line arguments and displays help with --help.
    """
    parser = ModifiedOptionParser(
        epilog='\nExample:\n  '
        'soundconverter -b [file] [dir] -r -m audio/x-vorbis -s .ogg -o ' +
        '[output dir] -Q 4\n'
    )

    parser.add_option(
        '-c', '--check', dest='mode', action='callback',
        callback=mode_callback, callback_kwargs={'mode': 'check'},
        help=_(
            'Log which files cannot be read by gstreamer. '
            'Useful before converting. This will disable the GUI and '
            'run in batch mode, from the command line.'
        )
    )
    parser.add_option(
        '-b', '--batch', dest='mode', action='callback',
        callback=mode_callback, callback_kwargs={'mode': 'batch'},
        help=_(
            'Convert in batch mode, from the command line, '
            'without a graphical user interface. You '
            'can use this from, say, shell scripts.'
        )
    )
    parser.add_option(
        '-t', '--tags', dest="mode", action='callback',
        callback=mode_callback,  callback_kwargs={'mode': 'tags'},
        help=_(
            'Show tags for input files instead of converting '
            'them. This indicates command line batch mode '
            'and disables the graphical user interface.'
        )
    )
    parser.add_option(
        '-q', '--quiet', action="store_true", dest="quiet",
        help=_("Be quiet. Don't write normal output, only errors.")
    )
    parser.add_option(
        '-d', '--debug', action="store_true", dest="debug",
        help=_('Displays additional debug information')
    )
    parser.add_option(
        '-j', '--jobs', action='store', type='int', dest='forced-jobs',
        metavar='NUM', help=_('Force number of concurrent conversions.')
    )

    # batch mode settings
    batch_option_group = OptionGroup(
        parser, 'Batch Mode Options',
        'Those options will only have effect when the -b, -c or -t '
        'option is provided'
    )
    batch_option_group.add_option(
        '-m', '--mime-type', dest="output-mime-type",
        help=_(
            'Set the output MIME type. The default '
            'is {}. Note that you will probably want to set the output '
            'suffix as well. Supported MIME types: {}'
        ).format(
            get_gio_settings().get_string('output-mime-type'),
            'audio/x-m4a (AAC) audio/x-flac (FLAC) audio/mpeg (MP3)'
            'audio/x-vorbis (Vorbis) audio/x-wav (WAV)'
        )
    )
    batch_option_group.add_option(
        '-r', '--recursive', action="store_true", dest="recursive",
        help=_('Go recursively into subdirectories')
    )
    batch_option_group.add_option(
        '-i', '--ignore', action="store_true", dest="ignore-existing",
        help=_(
            'Ignore files for which the target already exists instead '
            'of converting them again'
        )
    )
    batch_option_group.add_option(
        '-o', '--output', action="store", dest="output-path",
        help=_(
            'Put converted files into a different directory while rebuilding '
            'the original directory structure. This includes the name of the '
            'original directory.'
        )
    )

    batch_option_group.add_option(
        '-Q', '--quality', action="store", type='float', dest="quality",
        metavar='NUM', help=_(
            'Quality of the converted output file. Possible values: '
            'vorbis: 0.0 - 1.0; '
            'aac: - 320; '
            'opus: - 192; '
            'mp3: - 320; '
            'wav: 8, 16, 32 (bitdepth); '
            'flac: 0 - 8 (compression strength)'
        ),
        default=None
    )

    parser.add_option_group(batch_option_group)

    return parser


parser = parse_command_line()

options, files = parser.parse_args(args)
options = vars(options)
# the only cli args that are not available over gio settings.
settings['mode'] = options.get('mode', 'gui')
settings['quiet'] = options.get('quiet', False)
settings['debug'] = options.get('debug', False)
settings['recursive'] = options.get('recursive', False)

# now that the settings are populated, the verbosity can be determined:
update_verbosity()

if not settings['quiet']:
    logger.info(('{} {}'.format(NAME, VERSION)))

if settings['mode'] == 'gui':
    GLADEFILE = os.path.join(DATA_PATH, 'soundconverter.glade')
    gui_main(NAME, VERSION, GLADEFILE, files)
else:
    if 'output-mime-type' not in options:
        parser.error('-m output-mime-type argument is required')
    if 'output-path' not in options:
        parser.error('-o output-path argument is required')
    check_mime_type(options['output-mime-type'])
    # now store the rest of the CLI args in the gio settings
    use_memory_gsettings(options)
    if not files:
        logger.info('nothing to doâ€¦')
    if settings['mode'] == 'tags':
        cli_tags_main(files)
    elif settings['mode'] == 'batch':
        CLI_Convert(files)
    elif settings['mode'] == 'check':
        CLI_Check(files)
